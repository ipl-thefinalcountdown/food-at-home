---

- name: install required packages
  apt:
    state: present
    name:
      - npm
      - nodejs
      - composer

- name: create ssl cert
  command: certbot certonly --email {{ webapp_domain_webmaster }} --agree-tos --rsa-key-size 4096 --renew-by-default --webroot -w {{ letsencrypt_validation_dir }} -d '{{ webapp_domain }}'
  args:
    creates: '/etc/letsencrypt/live/{{ webapp_domain }}/fullchain.pem'
  when: 'webapp_domain is defined'

- name: make webapp user
  user:
    name: "{{ webapp_user }}"
    shell: /bin/bash
    createhome: yes

- name: create webapp directory
  file:
    path: "{{ webapp_dir }}"
    state: directory
    owner: "{{ webapp_user }}"
    group: www-data
    mode: 0775

- name: copy webapp
  copy:
    src: app/webapp
    dest: "{{ webapp_dir }}"
  become: true
  become_user: "{{ webapp_user }}"
  register: release

- name: copy websockets
  copy:
    src: app/websockets
    dest: "{{ webapp_dir }}"
  become: true
  become_user: "{{ webapp_user }}"
  register: release

- name: create db
  mysql_db:
    name: "{{ db.database }}"
    login_host: "{{ webapp_db_host }}"
    login_password: "{{ db.root_password }}"
    encoding: utf8
  register: db_created
  no_log: true

- name: create db user
  mysql_user:
    name: "{{ db.user }}"
    password: "{{ db.password }}"
    login_host: "{{ webapp_db_host }}"
    login_password: "{{ db.root_password }}"
    priv: "{{ db.database }}.*:ALL"
  no_log: true

- name: install webapp composer dependencies
  command: composer install
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"


- name: install webapp npm dependencies
  command: npm install
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: build frontend
  command: npm run prod
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: install websockets dependencies
  command: npm install
  args:
    chdir: "{{ webapp_dir }}/websockets"
  become: true
  become_user: "{{ webapp_user }}"

- name: install webapp websockets unit
  template:
    src: "webapp-websockets.service.j2"
    dest: "/etc/systemd/system/webapp-websockets.service"
    owner: root
    group: root
    mode: 0644
  notify: daemon reload

- name: set up laravel environment
  template:
    src: env.j2
    dest: "{{ webapp_dir }}/webapp/.env"
    owner: "{{ webapp_user }}"
    group: "{{ webapp_user }}"
    mode: 0644
  become: true
  become_user: "{{ webapp_user }}"
  register: release

- name: generate app key
  command: php artisan key:generate
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: migrate database
  shell: echo 'yes' | php artisan migrate
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: link storage
  command: php artisan storage:link
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: seed database
  shell: echo "yes\n1" | php artisan db:seed
  args:
    chdir: "{{ webapp_dir }}/webapp"
  become: true
  become_user: "{{ webapp_user }}"

- name: set up nginx
  template:
    src: nginx.d.conf.j2
    dest: "{{ webapp_nginx_conf }}"
    owner: root
    group: root
    mode: 0644
  notify: reload nginx
  tags: ['nginx']

- name: make nginx log dir
  file:
    path: "/var/log/nginx/{{ webapp_domain }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: make php-fpm dir
  file:
    path: "/etc/php/php-fpm.d/"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: configure php-fpm
  template:
    src: php-fpm.conf.j2
    dest: "/etc/php/php-fpm.d/{{ webapp_user }}.conf"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart php-fpm@{{ webapp_user }}

- name: start and enable systemd socket
  service:
    name: php-fpm@{{ webapp_user }}.socket
    state: started
    enabled: true
